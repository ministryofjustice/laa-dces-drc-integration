plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'
	id "org.sonarqube" version "4.0.0.2929"
}

def versions = [
		pitestVersion          : '1.4.10',
		sentryVersion          : '6.15.0',
		springdocVersion       : '1.6.15',
		okhttpVersion          : '4.9.3',
		mockwebserverVersion   : '4.9.3',
		reactorTestVersion     : '3.2.3',
		springSecurityConfig   : '6.1.2',
		springSecurityWeb      : '6.1.1',
		springOAuthJose        : '6.1.1',
		springOAuthClient      : '3.1.1',
		springOAuthResource    : '3.1.1',
		springauthserverVersion: '1.0.1',
		jjwtVersion            : '0.11.5',
		jaxbXjc                : '4.0.0',
		jaxbImpl               : '4.0.0',
		jaxbCore               : '4.0.0',
		jakartaActivation      : '2.0.1',
		jakartaXmlBindApi      : '4.0.0',
		glassfishJaxb          : '4.0.2',
		resilience4jVersion    : '2.0.2',
		wiremockVersion        : '2.35.0',
		notifyVersion          : '4.1.0-RELEASE',
		micrometerio           : '1.1.3',
		prometheus             : '1.11.2'
]

group = 'uk.gov.justice.laa.crime'


dependencyManagement {
	dependencies {
		dependencySet(group: 'io.sentry', version: versions.sentryVersion) {
			entry 'sentry-spring-boot-starter'
			entry 'sentry-logback'
		}
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

project.ext {
	jaxbTargetDir = file("src/main/java")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}


repositories {
	mavenCentral()
}

dependencies {
	// Sentry
	implementation 'io.sentry:sentry-spring-boot-starter-jakarta:6.27.0'
	implementation platform('io.sentry:sentry-bom:6.17.0')
	implementation('io.sentry:sentry-spring-boot-starter')
	implementation('io.sentry:sentry-logback')

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-aop'


	// oAuth
	implementation "org.springframework.security:spring-security-config:$versions.springSecurityConfig"
	implementation "org.springframework.security:spring-security-web:$versions.springSecurityWeb"
	implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server:$versions.springOAuthResource"
	implementation "org.springframework.boot:spring-boot-starter-oauth2-client:$versions.springOAuthClient"
	implementation "org.springframework.security:spring-security-oauth2-jose:$versions.springOAuthJose"

	implementation "org.springdoc:springdoc-openapi-ui:$versions.springdocVersion"
	implementation "io.github.resilience4j:resilience4j-spring-boot3:$versions.resilience4jVersion"


	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	implementation "io.micrometer:micrometer-tracing-bom:$versions.micrometerio"
	implementation "io.micrometer:micrometer-tracing-bridge-brave:$versions.micrometerio"
	implementation "io.micrometer:micrometer-registry-prometheus:$versions.prometheus"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
}

jacoco {
	toolVersion = "0.8.8"
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/entity/**',
					'**/dto/**',
					'**/config/**'
			])
		}))
	}
}

sonar {
	properties {

		property "sonar.projectName", "laa-dces-report-service"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.organization", "ministryofjustice"
		property "sonar.projectKey", "ministryofjustice_laa-dces-drc-integration"

		property "sonar.exclusions", "**/entity/**.java , **/model/**.java , **/dto/**.java , **/config/**.java, **/jms/**.java,**/exception/**.java,**/handler/**.java,**/maatapi/**Client**.java,**/generated/**"
		property "sonar.coverage.exclusions", "**/DcesDrcIntegrationApplication.java"
		property "sonar.coverage.jacoco.xmlReportPaths",
				"${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
	}
}
