import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.sonarqube" version "6.2.0.5505"
}

def versions = [
		sentryVersion          : '8.16.0',
		springdocVersion       : '2.8.9',
		resilience4jVersion    : '2.3.0',
		wiremockVersion        : '3.13.1',
		logbackEncoderVersion  : '8.1',
		serenityVersion        : "4.2.34",
		shedlockVersion        : "6.9.0",
		okhttpVersion          : '5.0.0'
]

group = 'uk.gov.justice.laa.crime'

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

project.ext {
	jaxbTargetDir = file("src/main/java")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	xsd2java
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestImplementation.extendsFrom testCompile
	integrationTestImplementation.extendsFrom testRuntime
	integrationTestCompileOnly {
		extendsFrom testCompileOnly
	}
	integrationTestAnnotationProcessor {
		extendsFrom testAnnotationProcessor
	}
	integrationTestRuntimeOnly {
		extendsFrom testRuntimeOnly
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Import Maven bills-of-materials (BOM) files as Gradle platforms:
	implementation platform(SpringBootPlugin.BOM_COORDINATES)
	implementation platform("io.sentry:sentry-bom:$versions.sentryVersion")

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// oAuth
	implementation "org.springframework.security:spring-security-config"
	implementation "org.springframework.security:spring-security-web"
	implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
	implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
	implementation "org.springframework.security:spring-security-oauth2-jose"

	implementation 'io.sentry:sentry-spring-boot-starter-jakarta'
	implementation 'io.sentry:sentry-logback'

	implementation "org.flywaydb:flyway-core"
	runtimeOnly "org.postgresql:postgresql"
	runtimeOnly "org.flywaydb:flyway-database-postgresql"

	implementation "net.logstash.logback:logstash-logback-encoder:$versions.logbackEncoderVersion"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$versions.springdocVersion"
	implementation "io.github.resilience4j:resilience4j-spring-boot3:$versions.resilience4jVersion"

	// XML Conversion
	xsd2java "com.sun.xml.bind:jaxb-xjc"
	xsd2java "com.sun.xml.bind:jaxb-impl"
	xsd2java "com.sun.xml.bind:jaxb-core"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	implementation "io.micrometer:micrometer-core"
	implementation "io.micrometer:micrometer-tracing-bridge-brave"
	implementation "io.micrometer:micrometer-registry-prometheus"
	implementation "net.javacrumbs.shedlock:shedlock-spring:$versions.shedlockVersion"
	implementation "net.javacrumbs.shedlock:shedlock-provider-jdbc-template:$versions.shedlockVersion"
	implementation 'net.datafaker:datafaker:2.4.4'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "org.springframework.security:spring-security-test"
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation "org.wiremock:wiremock-standalone:$versions.wiremockVersion"
	testImplementation "com.squareup.okhttp3:mockwebserver:$versions.okhttpVersion"
	testImplementation "net.javacrumbs.shedlock:shedlock-provider-inmemory:$versions.shedlockVersion"
	testImplementation "net.serenity-bdd:serenity-rest-assured:$versions.serenityVersion"
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:testcontainers'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.testcontainers:localstack'
}

jacoco {
	toolVersion = "0.8.8"
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

sourceSets {
	// Note that just declaring this sourceset creates two configurations.
	integrationTest {
		java {
			compileClasspath += main.output
			runtimeClasspath += main.output
		}
	}
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/entity/**',
					'**/dto/**',
					'**/config/**'
			])
		}))
	}
}

sonar {
	properties {
		property "sonar.projectName", "laa-dces-drc-integration"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.organization", "ministryofjustice"
		property "sonar.projectKey", "ministryofjustice_laa-dces-drc-integration"
		property "sonar.exclusions", "**/entity/**.java , **/model/**.java , **/dto/**.java , **/config/**.java, **/jms/**.java,**/exception/**.java,**/handler/**.java,**/maatapi/**Client**.java,**/generated/**, **/listener/stub/DrcStubRestController.java, src/test/**"
		property "sonar.coverage.exclusions", "**/DcesDrcIntegrationApplication.java, **/controller/StubAckFromDrcController.java, **/controller/TempTestController.java, **/service/MigrationService.java"
		property "sonar.coverage.jacoco.xmlReportPaths",
				"${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
	}
}

tasks.register('xsd2java') {
	doLast {
		jaxbTargetDir.mkdirs()

		ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJC2Task', classpath: configurations.xsd2java.asPath)
		ant.jaxbTargetDir = jaxbTargetDir

		ant.xjc(
				destdir: '${jaxbTargetDir}',
				package: 'uk.gov.justice.laa.crime.dces.integration.model.generated.fdc',
				schema: 'src/main/resources/schemas/fdc.xsd',
				extension: 'true',
				binding: 'src/main/resources/schemas/bindings_general.xml'
		)

		ant.xjc(
				destdir: '${jaxbTargetDir}',
				package: 'uk.gov.justice.laa.crime.dces.integration.model.generated.contributions',
				schema: 'src/main/resources/schemas/contributions.xsd',
				extension: 'true',
				binding: 'src/main/resources/schemas/bindings_general.xml'
		)

		ant.xjc(
				destdir: '${jaxbTargetDir}',
				package: 'uk.gov.justice.laa.crime.dces.integration.model.generated.ack',
				schema: 'src/main/resources/schemas/fileACK.xsd',
				extension: 'true',
				binding: 'src/main/resources/schemas/bindings_fileACK.xml'
		)
	}
}

tasks.register('integrationTest', Test) {
	useJUnitPlatform()
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
}

compileJava.dependsOn xsd2java
